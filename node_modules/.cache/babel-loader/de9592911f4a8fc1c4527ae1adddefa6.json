{"ast":null,"code":"import { ethers } from \"ethers\";\nimport CasinoAbi from \"../backend/contractsData/Casino.json\";\nimport CasinoAddress from \"../backend/contractsData/Casino-address.json\";\nlet casino = null;\n\nconst loadContracts = async signer => {\n  casino = new ethers.Contract(CasinoAddress.address, CasinoAbi.abi, signer);\n};\n\nconst tokenBalance = async acc => {\n  const balance = await casino.tokenBalance(acc);\n  return parseInt(balance._hex);\n};\n\nconst buyTokens = async (tokenNum, price) => {\n  await (await casino.compraTokens(tokenNum, {\n    value: ethers.utils.parseEther(price.toString())\n  })).wait();\n};\n\nconst withdrawTokens = async tokenNum => {\n  await (await casino.devolverTokens(tokenNum)).wait();\n};\n\nconst playRoulette = async (start, end, tokensBet) => {\n  const game = await (await casino.jugarRuleta(start.toString(), end.toString(), tokensBet.toString())).wait();\n  let result;\n\n  try {\n    result = {\n      numberWon: parseInt(game.events[1].args[0]._hex),\n      result: game.events[1].args[1],\n      tokensEarned: parseInt(game.events[1].args[2]._hex)\n    };\n  } catch (error) {\n    result = {\n      numberWon: parseInt(game.events[2].args[0]._hex),\n      result: game.events[2].args[1],\n      tokensEarned: parseInt(game.events[2].args[2]._hex)\n    };\n  }\n\n  return result;\n};\n\nconst tokenPrice = async () => {\n  const price = await casino.precioTokens(1);\n  return ethers.utils.formatEther(price._hex);\n};\n\nconst historial = async account => {\n  const historial = await casino.tuHistorial(account);\n  let historialParsed = [];\n  historial.map(game => historialParsed.push([game[2], parseInt(game[0]), parseInt(game[1])]));\n  return historialParsed;\n};\n\nexport default {\n  loadContracts,\n  tokenBalance,\n  buyTokens,\n  tokenPrice,\n  historial,\n  playRoulette,\n  withdrawTokens\n};","map":{"version":3,"names":["ethers","CasinoAbi","CasinoAddress","casino","loadContracts","signer","Contract","address","abi","tokenBalance","acc","balance","parseInt","_hex","buyTokens","tokenNum","price","compraTokens","value","utils","parseEther","toString","wait","withdrawTokens","devolverTokens","playRoulette","start","end","tokensBet","game","jugarRuleta","result","numberWon","events","args","tokensEarned","error","tokenPrice","precioTokens","formatEther","historial","account","tuHistorial","historialParsed","map","push"],"sources":["D:/test/Decentralized-Crypto-Casino/src/services/contractsService.js"],"sourcesContent":["import { ethers } from \"ethers\";\r\nimport CasinoAbi from \"../backend/contractsData/Casino.json\";\r\nimport CasinoAddress from \"../backend/contractsData/Casino-address.json\";\r\n\r\n    let casino = null;\r\n\r\n    const loadContracts = async(signer) => {\r\n        casino = new ethers.Contract(CasinoAddress.address, CasinoAbi.abi, signer);\r\n    }\r\n\r\n    const tokenBalance = async(acc) =>{\r\n        const balance = await casino.tokenBalance(acc);\r\n        return parseInt(balance._hex);\r\n    }\r\n\r\n    const buyTokens = async(tokenNum, price) =>{\r\n        await (await casino.compraTokens(tokenNum, {value: ethers.utils.parseEther(price.toString())})).wait();\r\n    }\r\n\r\n    const withdrawTokens = async(tokenNum) =>{\r\n        await (await casino.devolverTokens(tokenNum)).wait();\r\n    }\r\n\r\n    const playRoulette = async(start, end, tokensBet) =>{\r\n        const game = await (await casino.jugarRuleta(start.toString(), end.toString(), tokensBet.toString())).wait();\r\n        let result\r\n        try{\r\n            result = {\r\n                numberWon : parseInt(game.events[1].args[0]._hex),\r\n                result: game.events[1].args[1],\r\n                tokensEarned: parseInt(game.events[1].args[2]._hex)\r\n            }\r\n        }catch(error){\r\n            result = {\r\n                numberWon : parseInt(game.events[2].args[0]._hex),\r\n                result: game.events[2].args[1],\r\n                tokensEarned: parseInt(game.events[2].args[2]._hex)\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n    const tokenPrice = async() =>{\r\n        const price = await casino.precioTokens(1)\r\n        return ethers.utils.formatEther(price._hex)\r\n    }\r\n\r\n    const historial = async(account) =>{\r\n        const historial = await casino.tuHistorial(account)\r\n        let historialParsed = []\r\n        historial.map((game) => (\r\n            historialParsed.push([game[2], parseInt(game[0]), parseInt(game[1])])\r\n          ))\r\n        return historialParsed\r\n    }\r\n\r\n\r\n    export default {loadContracts, tokenBalance, buyTokens, tokenPrice, historial, playRoulette, withdrawTokens};\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}